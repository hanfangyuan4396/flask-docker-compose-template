
name: Create and publish a Docker image

on:
  push:
    branches: ['main']
  create:
  workflow_dispatch:
env:
  ACR_REGISTRY: registry.cn-hangzhou.aliyuncs.com
  ACR_IMAGE_NAME: ${{ secrets.ACR_NAMESPACE }}/flask-api
  # 测试服务器的docker-compose.yaml路径
  # TEST_SERVER_DOCKER_COMPOSE_PATH: /home/hfy/services/flask-api/docker-compose.yaml
  # workflow运行失败通过wecom群机器人通知
  WECOM_WEBHOOK_URL: https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${{ secrets.WECOM_WEBHOOK_KEY }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to the ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.ACR_REGISTRY }}/${{ env.ACR_IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 部署服务到测试服务器
      # - name: executing remote ssh commands using ssh key
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.TEST_SERVER_HOST }}
      #     username: ${{ secrets.TEST_SERVER_USERNAME }}
      #     key: ${{ secrets.TEST_SERVER_KEY }}
      #     script: sudo docker compose -f ${{ env.TEST_SERVER_DOCKER_COMPOSE_PATH }} up -d

      - name: Notify failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const webhookUrl = "${{ env.WECOM_WEBHOOK_URL }}";
            const messageContent = "${{ github.repository }}" + "部署失败！";
            const message = {
              msgtype: "text",
              text: {
                content: messageContent
              }
            };
            await github.request("POST " + webhookUrl, {
              data: message,
              headers: {
                "Content-Type": "application/json"
              }
            });
